type User {
    id: ID!  @id @unique
    type: OrganizationType!
    bank: Bank!
    firstName: String!
    lastName: String!
    refCode: String
    referral: Referral!
    device: Int
    email: String! @unique
    phoneNumber: String! @unique
    dob: String!
    status: Int!
    terms: Boolean,
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type SpacesOptions {
    id: ID!  @id @unique
    slug: String
    name: String
    default: Boolean
    userId: String
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type Locations {
    id: ID!  @id @unique
    country: String!
    state: String
    geo: String
    lga: String
    street: String
    userId: String
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type PropertiesOptions {
    id: ID!  @id @unique
    slug: String
    name: String
    default: Boolean
    userId: String
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type WallFinishesOptions {
    id: ID!  @id @unique
    slug: String
    name: String
    default: Boolean
    userId: String
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type ListingDimensions {
    id: ID!  @id @unique
    height: Float!
    weight: Float!
    length: Float!
    unitOfDimensions: Int
    volume: Float
    area: Float
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type WarehouserIdentification {
    id: ID!  @id @unique
    idNumber: String!
    expiryDate: String!
    idType: String!
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type Listing {
    id: ID!  @id @unique
    name: String
    slug: String
    user: User!
    description: String!
    price: Float!
    discount: Int
    currency: String!
    proofOfOwnership: String!
    identification: WarehouserIdentification!
    spacing: [SpacesOptions]!
    property:[PropertiesOptions]!
    floor:[FloorsOptions]!
    wallFinish:[WallFinishesOptions]!
    roofing:[RoofingMaterialOptions]!
    isSecure: SelectOptions! @relation(name: "SelectOptions_isSecure")
    pest: SelectOptions!  @relation(name: "SelectOptions_pest")
    windows: Int!
    location: Locations!
    amenities: [AmenitiesOptions]!
    avatar: String!
    vas: [ValueAddedServices]!
    listingPhotos: [ListingPhotos]!
    frequency: ListingsFrequencies!
    requirements: [ListingRequirements]!
    products: [ListingProducts]!
    availability: ListingAvailability!
    dimensions: ListingDimensions!
    status: Int!
    rating: ListingRating!
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type Rating {
    id: ID!  @id @unique
    listingId: String!
    ratingId: String!
    rate: Int!
    userId: String!
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type Requisition {
    id: ID!  @id @unique
    duration: RequisitionDuration!
    cost: RequisitionCost!
    user: User!
    expires: String
    products: [ListingProducts!]!
    listing: Listing!
    space: Int!
    status: Int!
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type RequisitionCost {
    id: ID!  @id @unique
    baseCost: Float!
    vat: Float!
    discount: Float
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type RequisitionDuration {
    id: ID!  @id @unique
    name: String!
    slug: String
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type ListingRating {
    id: ID!  @id @unique
    count: Int!
    rates: Int!
    average: Float!
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type ListingAvailability {
    id: ID!  @id @unique
    from: String!
    to: String!
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type ListingRequirements {
    id: ID!  @id @unique
    slug: String
    name: String
    userId: String
    default: Boolean
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type SelectOptions {
    id: ID!  @id @unique
    slug: String
    name: String
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type RoofingMaterialOptions {
    id: ID!  @id @unique
    slug: String
    name: String
    default: Boolean
    userId: String
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type FloorsOptions {
    id: ID!  @id @unique
    slug: String
    name: String
    default: Boolean
    userId: String
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type AmenitiesOptions {
    id: ID!  @id @unique
    slug: String
    name: String
    default: Boolean
    userId: String
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type ValueAddedServices {
    id: ID!  @id @unique
    slug: String
    default: Boolean
    name: String
    userId: String
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type IdentificationsOptions {
    id: ID!  @id @unique
    slug: String
    name: String
    default: Boolean
    userId: String
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type ListingsFrequencies {
    id: ID!  @id @unique
    slug: String
    name: String
    default: Boolean
    userId: String
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type ListingPhotos {
    id: ID!  @id @unique
    url: String!
    default: Boolean
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type States {
    id: ID!  @id @unique
    countryId: String!
    slug: String
    name: String
    default: Boolean
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type Countries {
    id: ID!  @id @unique
    slug: String
    name: String
    default: Boolean
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type ListingProducts {
    id: ID!  @id @unique
    slug: String
    name: String
    default: Boolean
    userId: String
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type Organization {
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
    id: ID! @id @unique
    name: String
    email: String!
    type: OrganizationType!
    phoneNumber: String!
    bank: Bank!
}

type OrganizationType {
    id: ID! @id @unique
    name: String  @unique
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type Auth {
    id: ID!  @id @unique
    email: String!  @unique
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
    phoneNumber: String!  @unique
    pin: String!
    userId: String
    user: User!
}

type Otp {
    id: ID!  @id @unique
    phoneNumber: String! @unique
    code: String!
    validated: Boolean!
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type UserOrganizationRole {
    id: ID!  @id @unique
    user: User!
    role: Role!
    organization: Organization!
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type Role {
    id: ID! @id @unique
    name: String  @unique
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type Success {
    id: ID! @id @unique
    success: Boolean!
}

type Bank {
    id: ID! @id @unique
    accountNumber: String!
    accountName: String!
    bankName: String!
    bankCode: String!
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

input AuthWhereUniqueInput {
  id: ID
  email: String
  phoneNumber: String
}

input OtpWhereUniqueInput {
  id: ID
  phoneNumber: String
}

input RoleWhereUniqueInput {
  id: ID
  name: String
}

type Stock {
	id: ID!  @id @unique
	type: Int!
	products: [StockProduct!]!
    cost: Int! @default( value: 0 )
	status: Int!
	dispatch: [StockDispatch]
    requisition: Requisition!
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}
 
type StockDispatch {
    id: ID!  @id @unique
    dispatchProduct: DispatchProduct
    pickupAgentName:String
    pickupAgentPhone: String
    pickupAgentIdentification: String
    pickupAgentIdNumber: String
    pickupDate: DateRange
    status: Int!
    pickupDateMin: String
    pickupDateMax: String
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type DispatchProduct {
    id: ID!  @id @unique
    productName: String!
    productSize: String!
    quantityPerSize: Int!
    totalQuantity: Int
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type DateRange {
    id: ID!  @id @unique
    min: String    
    max: String!
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type StockProduct {
    id: ID!  @id @unique
    productBrandName: String!
    productType: String!
    productPackageSize: String!
    quantityPerPackageSize: Int!
    totalQuantity: Int!
    productImage: String!
    estimatedValue: Float
    shipmentDate: DateTime
    deliveryDate: DateTime
    partnerLogistics: String
    expiryDate: DateTime
    condition: String
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type Wallet {
    id: ID!  @id @unique
    recipientCode: String!
    userId: String! @unique
    owner: User! @relation(name: "Walllet_user")
    transactions:[Transaction]!
    bank: Bank!
    availableBalance: Float!
    status: Int
    ledgerBalance: Float!
    currency: String
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type Transaction {
    id:ID!  @id @unique
    type: Int!
    userId: String!
    to: User! @relation(name:"MerchantUser")
    user: User! @relation(name:"WarehouserUser")
    description: String @default(value: "")
    status: Int!
    amount: Float!
    fees: Float!
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type Chat {
    id:ID! @id @unique
    merchantId: String!
    warehouserId: String!
    merchant: User! @relation(name: "ChatMerchant")
    warehouser: User! @relation(name: "ChatWarehouser")
    requisitionId: String!
    messages:[Message]!
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type Message {
    id: ID! @id @unique
    chatId: String!
    from: User!
    text: String! @default(value: "")
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type Payment {
    id: ID!  @id @unique
    email: String! 
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
    amount: Float! 
    requisition: Requisition!
    status: Int!
    currency: String!
    channel: String
    customer: PaymentCustomer @relation(name: "PaymentCustomer_customer")
    info: String!
}

type PaymentCustomer {
    id: ID!  @id @unique
    paystackId: String
    customerCode: String
    firstName: String
    lastName: String
    email: String
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type Referral {
    id: ID!  @id @unique
    status: Boolean!
    refCode: String! @unique
    userId: String @unique
    crown: Crown
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt  
    startDate: DateTime 
    endDate: DateTime
    boost: Float!
    rollover:Float!
}

type ReferralHistory {
    id: ID!  @id @unique
    userId: String @unique
    bonus: Int
    totalReferrals: Int
    endDate: DateTime
    crown: Crown
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt  
}

type Crown {
    id: ID!  @id @unique
    requiredReferrals: Int!
    noOfDays: Int!
    bonus: Int!
    name: String!
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt  
    compensationCount: Float!
    compensationBonus: Float!
}

type Game {
    id: ID!  @id @unique
    referralId: String!
    userId: String!
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt  
}

type AdminRole {
    id: ID! @id @unique
    name: String!
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type AdminUser {
    id: ID! @id @unique
    firstName: String!
    lastName: String!
    phoneNumber: String!
    email: String! @unique
    password: String!
    role: AdminRole!
    roleId: Int!
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}

type UserStatus {
    id: ID! @id @unique,
    status: String! @default(value: "offline"),
    userId: String! @unique 
    createdAt: DateTime! @createdAt
    updatedAt: DateTime @updatedAt
}
